import numpy as np
import matplotlib.pyplot as plt
import os

# Variant rules
def odd_rule_1(z):  # 3x*i + 1
    return 3*z*1j + 1

def odd_rule_2(z):  # 3x + i
    return 3*z + 1j

def odd_rule_3(z):  # 3x*i + i
    return 3*z*1j + 1j

def even_rule_1(z):   # 0.5*x*i
    return 0.5*z*1j

def even_rule_2(z):
    return 0.5*z

# Stopping criterion: modulus < epsilon or max_iter
def stopping_time(n, odd_rule, even_rule, max_iter=2000, epsilon=1e-10):
    z = complex(n)
    for step in range(1, max_iter+1):
        # Check for NaN or infinity
        if np.isnan(z.real) or np.isnan(z.imag) or np.isinf(z.real) or np.isinf(z.imag):
            return max_iter
        
        # Stopping condition: modulus close to zero
        if abs(z) < epsilon:
            return step
            
        # Check for divergence
        if abs(z) > 1e10:
            return max_iter
            
        try:
            if abs(z.imag) < 1e-10 and int(z.real) % 2 == 0:
                z = even_rule(z)
            else:
                z = odd_rule(z)
        except (ValueError, OverflowError):
            return max_iter
            
    return max_iter  # Did not converge

variant_defs_odd = [
    ("3x*i + 1", odd_rule_1), 
    ("3x + i", odd_rule_2), 
    ("3x*i + i", odd_rule_3)
]
variant_defs_even = [("0.5*x*i", even_rule_1), ("0.5*x", even_rule_2)]

print("Generating Collatz Complex Variants stopping time analysis...")

start_vals = range(1, 500)  # Reduced for performance
fig_count = 0

for even_name, even_rule in variant_defs_even:
    print(f"Processing even rule: {even_name}")
    fig, axes = plt.subplots(1, 3, figsize=(18, 5), sharey=True)
    
    for ax, (odd_name, odd_rule) in zip(axes, variant_defs_odd):
        print(f"  Processing odd rule: {odd_name}")
        stop_times = [stopping_time(n, odd_rule, even_rule) for n in start_vals]
        sc = ax.scatter(start_vals, stop_times, c=stop_times, cmap='twilight', s=30)
        ax.set_title(f"Odd: {odd_name}")
        ax.set_xlabel('Starting Number')
        ax.set_ylabel('Stopping Time')
        ax.grid(True, linestyle='--', alpha=0.5)
        ax.set_ylim(bottom=0)
        plt.colorbar(sc, ax=ax, orientation='vertical', label='Stopping Time')
    
    plt.suptitle(f'Stopping Time vs Starting Number (Even: {even_name})', fontsize=16)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    # Save the figure
    output_path = os.path.join("figures", f"collatz_cv_2_stopping_times_{even_name.replace('*', '_').replace('/', '_')}.png")
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    print(f"  Figure saved to: {output_path}")
    
    plt.show()
    fig_count += 1

print(f"Collatz CV_2 analysis completed! Generated {fig_count} figures.")

