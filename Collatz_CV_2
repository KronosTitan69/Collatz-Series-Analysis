import numpy as np
import matplotlib.pyplot as plt

# Variant rules
def odd_rule_1(z):  # 3x*i + 1
    return 3*z*1j + 1

def odd_rule_2(z):  # 3x + i
    return 3*z + 1j

def odd_rule_3(z):  # 3x*i + i
    return 3*z*1j + 1j

def even_rule_1(z):   # 0.5*x*i
    return 0.5*z*1j

def even_rule_2(z):
    return 0.5*z

# Function to generate the modified Collatz sequence

# Stopping criterion: modulus < epsilon or max_iter
def stopping_time(n, odd_rule, even_rule, max_iter=2000, epsilon=1e-10):
    z = complex(n)
    for step in range(1, max_iter+1):
        # Stopping condition: modulus close to zero
        if abs(z) < epsilon:
            return step
        if int(z.real) % 2 == 0 and z.imag == 0:
            z = even_rule(z)
        else:
            z = odd_rule(z)
    return max_iter  # Did not converge

variant_defs_odd = [
    odd_rule_1, odd_rule_2, odd_rule_3
]
variant_defs_even = [even_rule_1, even_rule_2]


start_vals = range(1, 3000)
for odd_rule in variant_defs_odd:
    for even_rule in variant_defs_even:
      fig, axes = plt.subplots(1, 3, figsize=(18, 5), sharey=True)
      for ax, (title, odd_rule) in zip(axes, variant_defs):
        stop_times = [stopping_time(n, odd_rule, even_rule) for n in start_vals]
        sc = ax.scatter(start_vals, stop_times, c=stop_times, cmap='twilight', s=30)
        ax.set_title(title)
        ax.set_xlabel('Starting Number')
        ax.set_ylabel('Stopping Time')
        ax.grid(True, linestyle='--', alpha=0.5)
        ax.set_ylim(bottom=0)
        plt.colorbar(sc, ax=ax, orientation='vertical', label='Stopping Time')
      plt.suptitle('Stopping Time vs Starting Number for Collatz Complex Variants (Even: 0.5*x*i)', fontsize=16)
      plt.tight_layout(rect=[0, 0.03, 1, 0.95])
      plt.show()

