import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

def collatz_variant_series(n, odd_rule, even_rule, max_iter=5000):
    """Generate the collatz variant series starting from n with given rules."""
    seq = []
    z = complex(n)
    for _ in range(max_iter):
        seq.append(z)
        # Check if z is even (real part even and imag part zero)
        if int(z.real) % 2 == 0:
            z = even_rule(z)
        else:
            z = odd_rule(z)
    return seq

# Odd rules
def odd_rule_1(z):  # 3x*i + 1
    return 3*z*1j + 1

def odd_rule_2(z):  # 3x + i
    return 3*z + 1j

def odd_rule_3(z):  # 3x*i + i
    return 3*z*1j + 1j

# Even rule
def even_rule(z):   # 0.5*x*i
    return 0.5*z

variant_rules = [
    ("Odd: 3x*i + 1", odd_rule_1),
    ("Odd: 3x + i", odd_rule_2),
    ("Odd: 3x*i + i", odd_rule_3),
]

# Settings
start_vals = range(1, 3000)  # Sizable series
max_iter = 50
colormap = cm.twilight  # Fractal-like color scheme

fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for ax, (title, odd_rule) in zip(axes, variant_rules):
    # Assign a unique color to each trajectory
    colors = [colormap(i / len(start_vals)) for i in range(len(start_vals))]
    for idx, start in enumerate(start_vals):
        series = collatz_variant_series(start, odd_rule, even_rule, max_iter)
        x = [z.real for z in series]
        y = [z.imag for z in series]
        ax.plot(x, y, color=colors[idx], linewidth=1.5, alpha=0.85, label=f'start={start}' if idx < 10 else None)
        ax.scatter(x, y, color=colors[idx], s=12, alpha=0.7)
    ax.set_title(title)
    ax.set_xlabel("Real")
    ax.set_ylabel("Imaginary")
    ax.grid(True, linestyle=':', alpha=0.5)
    ax.axis('equal')
    # Only show legend for first 10 trajectories to avoid clutter
    if ax == axes[0]:
        ax.legend(loc='upper left', fontsize='small', ncol=2)

plt.suptitle("Collatz Complex Variants in Argand Plane (Even: 0.5*x*i)", fontsize=16)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()