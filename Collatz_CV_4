import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import os

def collatz_variant_series(n, odd_rule, even_rule, max_iter=5000, max_abs_val=1e10):
    """Generate the collatz variant series starting from n with given rules."""
    seq = []
    z = complex(n)
    for _ in range(max_iter):
        seq.append(z)
        
        # Check for divergence, NaN, or infinity
        if np.abs(z) > max_abs_val or np.isnan(z.real) or np.isnan(z.imag) or np.isinf(z.real) or np.isinf(z.imag):
            break
            
        try:
            # Check if z is even (real part even and imag part close to zero)
            if abs(z.imag) < 1e-10 and int(z.real) % 2 == 0:
                z = even_rule(z)
            else:
                z = odd_rule(z)
        except (ValueError, OverflowError):
            break
            
    return seq

# Odd rules
def odd_rule_1(z):  # 3x*i + 1
    return 3*z*1j + 1

def odd_rule_2(z):  # 3x + i
    return 3*z + 1j

def odd_rule_3(z):  # 3x*i + i
    return 3*z*1j + 1j

# Even rule
def even_rule(z):   # 0.5*x
    return 0.5*z

variant_rules = [
    ("Odd: 3x*i + 1", odd_rule_1),
    ("Odd: 3x + i", odd_rule_2),
    ("Odd: 3x*i + i", odd_rule_3),
]

print("Generating Collatz Complex Variants comprehensive visualization...")

# Settings - optimized for performance and visibility
start_vals = range(1, 200)  # Reduced for performance
max_iter = 100
colormap = cm.twilight  # Fractal-like color scheme

fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for ax, (title, odd_rule) in zip(axes, variant_rules):
    print(f"Processing variant: {title}")
    # Assign a unique color to each trajectory
    colors = [colormap(i / len(start_vals)) for i in range(len(start_vals))]
    
    for idx, start in enumerate(start_vals):
        if idx % 50 == 0:
            print(f"  Processing trajectory {idx+1}/{len(start_vals)}")
            
        series = collatz_variant_series(start, odd_rule, even_rule, max_iter)
        if len(series) > 1:  # Only plot if we have a meaningful trajectory
            x = [z.real for z in series]
            y = [z.imag for z in series]
            ax.plot(x, y, color=colors[idx], linewidth=1.0, alpha=0.6)
            ax.scatter(x, y, color=colors[idx], s=8, alpha=0.5)
    
    ax.set_title(title)
    ax.set_xlabel("Real")
    ax.set_ylabel("Imaginary")
    ax.grid(True, linestyle=':', alpha=0.5)
    ax.axis('equal')

plt.suptitle("Collatz Complex Variants in Argand Plane (Even: 0.5*x)", fontsize=16)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])

# Save the figure
output_path = os.path.join("figures", "collatz_cv_4_comprehensive_variants.png")
plt.savefig(output_path, dpi=300, bbox_inches='tight')
print(f"Figure saved to: {output_path}")

plt.show()
print("Collatz CV_4 analysis completed!")